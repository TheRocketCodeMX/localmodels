services:
  # Ollama service running GPT-OSS
  ollama:
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_ORIGINS=*
    restart: unless-stopped
    # GPU support commented out for WSL compatibility
    # Uncomment the deploy section below if you have NVIDIA GPU properly configured
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]

  # LiteLLM Proxy Service
  litellm-proxy:
    image: ghcr.io/berriai/litellm:main
    ports:
      - "4000:4000" # Default LiteLLM proxy port
    volumes:
      - ./litellm_config.json:/app/litellm_config.json # Mount the config file
    environment:
      - LITELLM_CONFIG=/app/litellm_config.json # Tell LiteLLM to use this config
      - LITELLM_MASTER_KEY=sk-1234 # Replace with a strong key in production
      - LITELLM_PORT=4000
    depends_on:
      - ollama
    restart: unless-stopped

  # API Gateway with ngrok
  gpt-oss-gateway:
    build: .
    ports:
      - "8000:8000"
    depends_on:
      - ollama
      - litellm-proxy # Keep proxy standalone, but FastAPI talks directly to Ollama
    environment:
      - OLLAMA_BASE_URL=http://ollama:11434 # FastAPI / in-process LiteLLM uses Ollama directly
      - DEFAULT_MODEL=${DEFAULT_MODEL:-qwen3:30b}
    restart: unless-stopped

  # Optional: Web UI for testing
  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    ports:
      - "3000:8080"
    environment:
      - OLLAMA_BASE_URL=http://ollama:11434 # Web UI still talks directly to Ollama
    volumes:
      - open_webui_data:/app/backend/data
    depends_on:
      - ollama
    restart: unless-stopped

volumes:
  ollama_data:
  open_webui_data:
